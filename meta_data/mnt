//
//Import app from the outlook library.
import * as outlook from "../../../outlook/v/code/outlook.js";

import * as app from "../../../outlook/v/code/app.js";
//
import { checkbox, io } from "../../../outlook/v/code/io.js";
//
//Import server
import * as server from "../../../schema/v/code/server.js";
//import { encryption } from "../../../outlook/v/node/test.js";
//
//Import schema.
import * as schema from "../../../schema/v/code/schema.js";
//
//Resolve the reference to the library
import * as lib from "../../../schema/v/code/library";
//
//Resolve the iquestionnaire
import * as quest from "../../../schema/v/code/questionnaire.js";
//
//Resolve the reference to the journal interface
import * as mod from "../../../outlook/v/code/module.js";
//
//
import { basic_value } from "../../../schema/v/code/library";
import { textarea } from '../../../outlook/v/code/io';
import { label } from '../../../schema/v/code/questionnaire';
import { content } from '../../../m_projects/diagrm/tree';
//
//System for tracking assignments for employees of an organization.
//
//A column on the application database that is linked to a corresponding one
//on the user database. Sometimes this link is broken and needs to be
//re-established.
type replica = { ename: string; cname: string };
//
//Intern information collected is used in two cases, when reporting and when
//editing
type usage =
	| {
			purpose: "report";
	  }
	| { purpose: "edit" };
//
//The type of intern data collected for reporting purposes.
type intern_data = {
	intern: {
		name: string;
		email: string;
		title: string;
		language: string;
		requirements: string;
	};
	kin: { name: string; email: string; phone: string };
	certification: Array<{
		certificate_name: string;
		institute: string;
		start_date: string;
		end_date: string;
	}>;
	attachment: Array<{
		company: string;
		designation: string;
		start_date: string;
		end_date: string;
	}>;
	sponsor: { name: string; email: string; phone: string };
	referee: { name: string; email: string; phone: string };
};
//
//Main application
export default class main extends app.app {
	//
	public writer: mod.writer;
	public messenger: mod.messenger;
	public accountant: mod.accountant;
	public scheduler: mod.scheduler;
	//
	//Initialize the main application.
	constructor(config: app.Iconfig) {
		super(config);
		//
		this.writer = new mod.writer();
		this.messenger = new mod.messenger();
		this.accountant = new mod.accountant();
		this.scheduler = new mod.scheduler();
	}
	//
	//Returns all the inbuilt products that are specific to
	//this application
	get_products_specific(): Array<outlook.assets.uproduct> {
		return [
			{
				id: "actions",
				title: "Actions",
				solutions: [
					{
						title: "View due assignments",
						id: "view_due_assignments",
						listener: ["event", () => this.vue_due_assignments()]
					}
				]
			},
			{
				id: "metavisuo",
				title: "Metavisuo",
				solutions: [
					{
						title: "Metavisuo",
						id: "meta_data",
						listener: ["event", () => this.view_meta_data()]
					}
				]
			},
			{
				id: "simulating_data",
				title: "Simulating data graph",
				solutions: [
					{
						title: "Simulating data",
						id: "simulating_data",
						listener: ["event", () => this.view_simulating_data()]
					}
				]
			},
			{
				id: "lvl2_registration",
				title: "Registration",
				solutions: [
					{
						title: "View Intern Information",
						id: "view_intern",
						listener: ["event", () => this.view_intern_information()]
					},
					
				]
			}
		];
	}

	//
	//Viewing the data migration diagram  
	async view_meta_data(){
		//
		// Getting the data migration file
		const Meta_visuo=new meta_visuo(this,"../../../tracker/v/templates/metavisuo.html");
		Meta_visuo.administer();
	}
	//
	//Viewing the data migration diagram  
	async view_simulating_data(){
		//
		// Getting the data migration file
		const migrate=new svg_migration_data(this,"../../../m_projects/svg_2/dat.html");
		migrate.administer();
	}
	//
	//List all assignments that are due and have not been reported.
	//Ordered by Date.
	vue_due_assignments(): void {
		alert("This method is not implemented yet.");
		//const data = encryption("encryption");
		//alert(data);
	}
	//
	//View information about an intern
	async view_intern_information(): Promise<void> {
		//
		//1. Select the intern from the table
		await this.get_selected_intern();
		//
	}
	//
	//Get the selected intern
	async get_selected_intern(): Promise<void> {
		//
		//1. Get the selected intern
		const tr: HTMLTableRowElement = this.document.querySelector(
			"#content>table>tbody>.TR"
		)!;
		//
		//When the administrator tries to view information about an intern, prompt
		//him/her to select a message. And stop the execution of the program
		if (tr === null)
			throw new schema.mutall_error(
				"NO INTERN was selected to reply. SELECT an INTERN and try again"
			);
		//
		//2. Get the primary key of the selected message
		const pk: string = tr.getAttribute("pk")!;
		//
		//3. Save the primary key of the selected intern
		localStorage.setItem("intern", pk);
	}
}

//
//Define the namespace  needed to create svg elements
const svgns = "http://www.w3.org/2000/svg";
		
//
//displaying the metavisuo chart
class meta_visuo extends outlook.terminal{
	//
	//Ths is the svg propery
	public svg:SVGElement;
	//
	// 
	//Define the rotation of the label system about the center of the circle
	rotate:number=30;

	//Set the view box properties
	//
	//Set the panning attrobutes of a view box
	panx:number = 0; 
	pany:number=0;
	//
	//Set the scaling attrobutes of a view box
	zoomx:number=128; 
	zoomy:number=64;
	// 
	//class constructor
	constructor(mother:main,file:string){
		super(mother,file);
	//
		// 1.DEFINE THE SVG.

		//Get the content element from our html file
		const content=this.get_element('content');
		//
		//
		// Create the svg tag and attach it to the content tag
		this.svg = document.createElementNS(svgns,"svg"); content.appendChild(this.svg);
		
		//
		//Add the view box attribute, based on the zoom and pan settings
		this.svg.setAttribute("viewBox",`${[this.panx, this.pany, this.zoomx, this.zoomy]}`);
	}
	
	//Override the show panels on the outlook library
	public async show_panels(): Promise<void> {
		
		//Draw the event entity
		this.entity_draw('event',32, 32, ['id', 'user', 'frequency', 'start_date', 'end_date','referee','sitting'] );
		//
		this.entity_draw('activity', 65, 23, ['name', 'date']);
	}
	// 
	//Draw a database entity, complete with all her attributes
	public async entity_draw(
		//
		//The name of the entity
		name:string,
		//
		//The center  of the circle
		cx:number, cy:number,
		//
		//The attributes
		attributes:Array<string>

	): Promise<void> {
		
		//2. DEFINE THE ENTITY AS A CIRCLE

        // Define the x and y coordinate sof the center of the circle
		const centerx:number=32; const centery:number = 32;
		//
		// The circle radius
		const circleradius:number=4;
		// 
		//		DRAW THE CIRCLE ENTITY 
		//		
        //Create the circle element represent an entity  
        const c:SVGCircleElement = document.createElementNS(svgns,"circle");
		// 
		//Attach the circle to the svg element
        this.svg.appendChild(c);
		// 
        // Set the x coordinate of the centre of the circle
        c.setAttribute("cx",`${centerx}`);
        // 
        // Set the y coordinate of the centre of the circle
        c.setAttribute("cy",`${centery}`);
        // 
        // Set the circle radius.
        c.setAttribute("r",`${circleradius}`);
		// 
		// Add an event lister to toggle the selection status
		c.onclick= ()=>c.classList.toggle('selected');
		//
		//Add an event listener for moving the circle to the any random position with the view
		this.svg.onclick=()=>this.entity_move_randomly(c,this.zoomx,this.zoomy);	
		//
		//Define the tick mark
		 this.marker_define("mline");
		// 
		//Draw the labels
		this.attributes_draw(centerx, centery, circleradius,labels,this.rotate);
	}

	//This is an event listener for moving the circle to the any random position with the view
	entity_move_randomly(c:SVGCircleElement, zoomx:number,zoomy:number):void{
		//
		//1. Set the x position of the circle's center to a random position between 0 and zoomx 
		c.setAttribute('cx', `${zoomx*Math.random()}`);
		//
		//2. Set the y position of the circle's center to a random position between 0 and zoomy 
		c.setAttribute('cy', `${zoomy*Math.random()}`);
		// 		
	}

	//Draw the labels for an entity that has the given center coordinates and the list of labels 
	attributes_draw(
		//
		// The center of the circle the starting point
		centerx:number,
		//
		centery:number,
		// 
		circleradius:number,
		// 
		labels:Array<string>,
		//
		//The angle of the label, relation to the vertical axis
		rotate:number
	):void{
		// 
		// Attach the svg element to the div content in the html page.
		const svg =this.get_element('content');
		// 
		// 					GROUPING THE ELEMENTS
		//Create a group tag
		const g = document.createElementNS(svgns,"g");
		// 
		// Attach the group element to the svg tag
		this.svg.appendChild(g);
		// 
		// Rotate the g tag about the center 
		g.setAttribute("transform",`rotate(${rotate},${centerx}, ${centery})`);
		// 
		// 					THE POLYLINE
		// Create the polyline element 
		const poly:SVGPolylineElement = document.createElementNS(svgns,"polyline");
		// 
		//Attach the polyline to the svg element
		g.appendChild(poly);
		//
		//Get the points that define the label segments
		//Create a new array (values)by populating it with the results of the labels
		const values:Array<string>=labels.map((lables,i)=>{return `${centerx},${centery-circleradius - 4*i}`});
		// 
		//Create,return and link a new string point to the value array 
		const points:string= values.join(",");
		// 
		// Define the polyline segments 
		poly.setAttribute('points', points);

		// Attach the markers to the polyline segments
		poly.setAttribute("marker-mid","url(#mline)");
		poly.setAttribute("marker-end","url(#mline)");
		// 
		// 					GROUPING THE TEXT ELEMENTS
		// Create a group tag element for the text
		// (gtext) to differentiate from the main group 
		const gtext= document.createElementNS(svgns,"g");
		//
		// Attach the gtext group to the group tag above
		g.appendChild(gtext);
		// 
		//Definine the top and left margins of the labels
		const left:number=2;
		const top:number=1;
		//
		// Provide  top and and left margins for the text label  
		gtext.setAttribute("transform",`translate(${left},${top})`);
		//
		//For each text,draw the label
		labels.forEach((label, i)=>this.attribute_draw(centerx, centery, circleradius,label, i,gtext));
	}
	// 
	//name
	marker_define(
		//Identifier neded for referencing this marker 
		id:string
	):void{

		// 		  DRAW THE LINE  MARKER
		//
		// Creating the marker element
		const marker:SVGMarkerElement =<SVGMarkerElement>document.createElementNS(svgns,"marker");
		
		// 
		//Attach the marker to the svg element
		this.svg.appendChild(marker);
		// 
		// Supply the marker attributes
		//
		//Define the marker view box
		const panx:number = 0;
		const pany:number=0;
		// 
		// Set the width of the viewport into which the <marker> is to be fitted when it is rendered according to the viewBox
		const realx:number = 16;
		// 
		// Set the height of the viewport into which the <marker> is to be fitted when it is rendered according to the viewBox 
		const realy: number =16;
		//
		//Marker size (pixels)
		// set the marker height of the marker
	    const tickheight:number=8;
		// 
		// Set the marker width of the marker
		const tickwidth: number=8;
		//
		//Set the marker view box
		marker.setAttribute("viewBox",`${[panx, pany, realx, realy]}`);
		//
		//Set the name of the marker
		marker.setAttribute("id", id);
		//
		//
		//Set the reference point for the marker to be the center of the viewbox
		//Define the x coordinate of the marker referencing point
		marker.setAttribute("refX",`${0.5*realx}`);
		// 
		//Define the y coordinate of the marker referencing point
		marker.setAttribute("refY",`${0.5*realy}`);

		marker.setAttribute("markerWidth",`${tickwidth}`);
		marker.setAttribute("markerHeight",`${tickheight}`);
		//
		//Define a tick mark
		const mark = this.tick_mark_define();
		// 
		// Attach the line marker to the marker element
		marker.appendChild(mark);
	}

	// 
	tick_mark_define():SVGLineElement{
		//
		// Creating the line marker.
		const mark:SVGLineElement = <SVGLineElement >document.createElementNS(svgns,"line");
		//
		//Daw the line that repersents a tick mark
		// The x1 coordinate of the tick mark
		const linetickx1:number=8;
		// 
		// The y1 coordinate of the tick mark
		const lineticky1:number=8;
		// 
		// The x2 coordinate of the tick mark
		const linetickx2:number=16;
		// 
		// The y2 coordinate of the tick mark
		const lineticky2:number=8;
		//  
		// Set the line marker element attributes
		mark.setAttribute("x1",`${linetickx1}`);
		mark.setAttribute("y1",`${lineticky1}`);
		mark.setAttribute("x2",`${linetickx2}`);
		mark.setAttribute("y2",`${lineticky2}`);
		//
		//Return the svg element
		return mark;
	}

	// 
	//Draw the given label at the given index position
	attribute_draw(
		//The original position where the line segment start at point x
		centerx:number,
		//
		//The original position where the line segment start at point y
		centery:number,
		// 
		circleradius:number,
		//
		//The lable that represents the properties in an entity 
		label:string,
		//
		// 
		index:number,
		//
		//The group that attach together the attributes and the line segments together 
		gtext:Element,
		
	):void{
		//
		//Create the label text Element
		const element:SVGTextElement = <SVGTextElement>document.createElementNS(svgns, "text");
		// 
		//Append the label text element to the gtext group element
		gtext.appendChild(element);

		//Set the x coordinate to the fixed value of x
		element.setAttribute("x",`${centerx}`);
		//
		//Set the y coordinate to the radius plus 1 units from the center minus index times 4
		element.setAttribute("y",`${centery-circleradius -4*index}`);
		//
		//Set the name of the label
		element.textContent= label;
		
	}
}
